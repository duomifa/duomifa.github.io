<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Long Luo's Develop Notes]]></title>
  <link href="http://longluo.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://longluo.github.io/"/>
  <updated>2014-06-22T17:24:59+08:00</updated>
  <id>http://longluo.github.io/</id>
  <author>
    <name><![CDATA[Frank Luo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译]Android音频: 如何使用AudioTrack播放一个WAV格式文件?]]></title>
    <link href="http://longluo.github.io/blog/20140621/android-audio-play-a-wav-file-on-an-audiotrack/"/>
    <updated>2014-06-21T23:15:30+08:00</updated>
    <id>http://longluo.github.io/blog/20140621/android-audio-play-a-wav-file-on-an-audiotrack</id>
    <content type="html"><![CDATA[<h4><strong><em>翻译 By Long Luo</em></strong></h4>

<h4>原文链接：<a href="http://mindtherobot.com/blog/580/android-audio-play-a-wav-file-on-an-audiotrack/">Android Audio: Play a WAV file on an AudioTrack</a></h4>

<pre><code>译者注：
1. 由于这是技术文章，所以有些词句使用原文，表达更准确。
2. 由于水平有效，有些地方可能翻译的不够准确，如有不当之处，敬请批评指正.
3. 针对某些语句，适当补充了上下文及更适合中文阅读，尽量做到信达雅。
</code></pre>

<p>如果你已经成功地了解了关于<strong>AudioTrack</strong>的<a href="http://mindtherobot.com/blog/555/android-audio-problems-hidden-limitations-and-opensl-es/" title="Android Audio: Problems, Hidden Limitations and OpenSL ES">一些话题</a>，那么你可能享受它带来的好处，例如低延迟（在STATIC(静态)模式），能够生成流式音频（在STREAM(流)模式）以及在播放之前，就能够访问和修改原始声音数据。</p>

<p>不过，现在的问题是如何从源获取数据。许多应用需要使用的<strong>AudioTrack</strong>并不能简单的生成PCM音频（一个例子，比如<strong>Ethereal Dialpad</strong>或者其他类似的App）。你可能需要从文件源去加载数据，例如<em>WAV</em>或<em>MP3</em>文件。</p>

<p>不要期望使用<strong>MediaPlayer</strong>，去解码<em>WAV</em>文件和<em>MP3</em>音频。虽然<strong>MediaPlayer</strong>播放这些文件非常好，但是其播放逻辑完全在Native层，同时并没有为我们提供额外选项，允许我们使用其他解码器实现我们的目的。因此，我们必须从手动地从音频文件进行解码出<em>PCM</em>。</p>

<p>在这篇文章中，将会讨论<strong>WAV</strong>格式文件。而在下一课中，我们将会更进一步，讨论如何从<strong>MP3</strong>文件读取音频。</p>

<h4>背景知识: 一些数字音频术语</h4>

<p>如果你的App不是专门为数字音频设计，那么在继续我们的讨论之前，你可能需要先了解一些基本的缩略语。别担心，都很简单，我们不需要对此做深入挖掘。</p>

<ul>
<li><p>PCM(<strong>脉冲调制方式</strong>) &ndash; 实现一个物理音频信号变成数字化最简单方法。基本原理就是信号变成了一个数字阵列，而其中<strong>每个数字代表的是声音在特定的时间瞬间的电平</strong>也可以说是能量（振幅）。(如果这种解释在科学上可能不会很准确，那我就只能说声抱歉了）。信不信由你，你可以使用这种方法表示<strong>任何复杂</strong>的声音，而且回放出来也非常精准。在这里，我们将只会谈到线性PCM。在线性PCM中，其中阵列中的每个数字都是原始声音振幅的<strong>线性表示</strong>。在某些情况下，对数映射能够更好地表示原来的声音幅度比例情况 &ndash; 但是我们不会讨论那些情况。</p></li>
<li><p>Sampling rate(采样率)：- 每秒你的数字声音有多少样本（声音幅度用数字表示）。样本越多，你能得到声音质量越好。目前在消费类音频系统目前使用的采样率通常是22050，44100和48000Hz/s。</p></li>
<li><p>每个样品分辨率/采样大小/位 &ndash; 定义表示振幅数字的大小和格式。例如，如果您使用的是8位整数，你只能表达出256级的幅度，所以原来的物理波形将被简化为256个离散电平，与此同时，你将失去一些声音精度也可以说是质量。如果你使用16位，那么声音质量变得更好。事实上，大部分时间你可能会使用16位音频。其他选项包括24位，32位（这些都是Android现在不支持的），或是使用浮点数。</p></li>
<li><p>声道 &ndash; 既可以是单声道，也可以是立体声(2个声道)，或者更多声道(但是Android不支持)。如果你想要有立体声，你需要有立体声音频，就必须要在每个声道都需要有一个独立的PCM数组，相应的信息量也会翻倍。</p></li>
</ul>


<!--more-->


<p>上述定义也有助于你理解特定的格式和长度的音频缓冲区的数据量，以便提前预备缓冲区。也就是你需要一个缓冲区，以用于存储5秒长度以44100Hz采样率的立体声16-bit线性PCM数据。数据计算公式如下所示：</p>

<p><code>5 sec * 44100 samples per sec * 2 bytes per sample * 2 channels = 882,000 bytes</code></p>

<p>这一数额所需的内存可能会让初学者感到惊讶，因为当你往你的磁盘上存储的音频时，一个MP3文件，一个880KB的文件就可以容纳以相同的采样率和分辨率1分钟时长的音轨。这是为什么呢？因为先进的格式，比如MP3格式。因为我们大脑无法分辨识别出一些音频的内容，所以使用了很多复杂的方式在压缩的过程中去掉了这些内容。然而，大多数低等级的音频API，包括Android的<strong>AudioTrack</strong>只能接受线性<strong>PCM</strong>。这就是为什么如果我们不能把整个样品都放在内存中，我们需要将要处理的数据流，循环缓冲区和其他聪明的方式来使用音频API。</p>

<p>希望这样的解释并没有让你产生困惑，现在让我们继续来实际做一些与Android上的数字音频有关的工作吧！</p>

<h4>WAV文件格式</h4>

<p>我们的目标是用一个<strong>InputStream</strong>，由其从一个<em>WAV</em>文件加载PCM数据，来提供原始字节数据。然后我们就可以将原始的PCM数据直接推送到使用已经正确的配置好了的<strong>AudioTrack.write</strong>，通过使用<strong><em>AudioTrack.write()</em></strong>这个API。</p>

<p><em>WAV</em>文件包含一个文件头和具体数据会。我们需要读取文件头以知道诸如采样速率，分辨率等信息。另外，我们通过文件头，也可以知道此格式是否支持。<em>WAV</em>可以封装成多种格式，我们无法全部支持。也许，只是合理的采样率，分辨率和通道的线性<strong>PCM</strong>格式。</p>

<p><em>WAV</em>格式的细节在互联网上都可以找到，你仅仅需要在Google上搜索下。但是，遗憾的是，我并没有搜索到一个很好的Java库来读取WAV文件，而且可以移植到<strong>Android</strong>下。因此，我自己写了一些简单的代码。</p>

<p>下面这个方法就是如何读取一个WAV文件的头部：</p>

<pre><code>private static final String RIFF_HEADER = "RIFF";
private static final String WAVE_HEADER = "WAVE";
private static final String FMT_HEADER = "fmt ";
private static final String DATA_HEADER = "data";

private static final int HEADER_SIZE = 44;

private static final String CHARSET = "ASCII";

/* ... */

public static WavInfo readHeader(InputStream wavStream) throws IOException,
        DecoderException {

    ByteBuffer buffer = ByteBuffer.allocate(HEADER_SIZE);
    buffer.order(ByteOrder.LITTLE_ENDIAN);

    wavStream.read(buffer.array(), buffer.arrayOffset(), buffer.capacity());

    buffer.rewind();
    buffer.position(buffer.position() + 20);
    int format = buffer.getShort();
    checkFormat(format == 1, "Unsupported encoding: " + format); // 1 means
                                                                    // Linear
                                                                    // PCM
    int channels = buffer.getShort();
    checkFormat(channels == 1 || channels == 2, "Unsupported channels: "
            + channels);
    int rate = buffer.getInt();
    checkFormat(rate &lt;= 48000 &amp;&amp; rate &gt;= 11025, "Unsupported rate: " + rate);
    buffer.position(buffer.position() + 6);
    int bits = buffer.getShort();
    checkFormat(bits == 16, "Unsupported bits: " + bits);
    int dataSize = 0;
    while (buffer.getInt() != 0x61746164) { // "data" marker
        Log.d(TAG, "Skipping non-data chunk");
        int size = buffer.getInt();
        wavStream.skip(size);

        buffer.rewind();
        wavStream.read(buffer.array(), buffer.arrayOffset(), 8);
        buffer.rewind();
    }
    dataSize = buffer.getInt();
    checkFormat(dataSize &gt; 0, "wrong datasize: " + dataSize);

    return new WavInfo(new FormatSpec(rate, channels == 2), dataSize);
}
</code></pre>

<p>上面的代码中，缺少的部分应该是显而易见的。正如你所看到的，仅仅支持16位，但在你可以修改代码以支持8位（<strong>AudioTrack</strong>不支持任何其他分辨率的）。</p>

<p>下面这个方法，则是用来读取文件剩余的部分 &ndash; <strong>音频数据</strong>。</p>

<pre><code>public static byte[] readWavPcm(WavInfo info, InputStream stream)
        throws IOException {
    byte[] data = new byte[info.getDataSize()];
    stream.read(data, 0, data.length);
    return data;
}
</code></pre>

<p>我们读取的<strong>WavInfo</strong>结构体，包含采样率，分辨率和声道数已经足够让我们去播放我们读取的音频了。</p>

<p>如果我们不需要将全部音频数据一次性放入内存中，我们可以使用一个<strong><em>InputStream</em></strong>，一点一点地读取。</p>

<h4>将PCM传入AudioTrack</h4>

<p>我们现在面临2种情况，新建一个适合这种格式的<strong>AudioTrack</strong>，或者使用一个已存在的<strong>AudioTrack</strong>，但是可能和我们<em>WAV</em>音频数据的格式不一致。</p>

<p>在第一种情况，事情就很简单了，我们仅仅需要使用<strong>AudioTrack</strong>构造器构造一个我们已经从WAV头部对应的即可。</p>

<p>第二种情况，我们就需要将我们的音频变成<strong>AudioTrack</strong>需要的目标格式。我们需要做一下几种转换方式：</p>

<p>如果采样率不同，要么丢弃或复制一个样本以便和目标速率相匹配。如果分辨率是不同的，将源信号分辨率映射到目标分辨率，从16位到8位，反之亦然。如果信道不同，我们要么将立体声声道混合成一个单声道或重复单声道的数据把它变成准立体声。（请考虑将这些算法的实现放在Native层，因为Native层在做这类处理有很大的优势。）</p>

<p>在其他情况下，我们已经确定格式已经匹配。我们使用<strong>AudioTrack.write()</strong>写入缓冲区，以便实现回放。</p>

<p>记住，如果你使用静态模式，你需要在<strong>play()</strong>之前，新建一个包含准确的缓冲区大小的<strong>AudioTrack</strong> ，同时写入<strong>write()</strong>音频数据。而在流模式下，我们可以先使用<strong>AudioTrack</strong>的<strong>play()</strong>，然后在使用<strong>write()</strong>写入数据部分</p>

<h4>总结</h4>

<p>你想实现<strong><em>AudioTrack</em></strong>上播放<strong><em>WAV</em></strong>音频可能有很多原因。有时候，可能是SoundPool有尺寸限制，或是MediaPlayer会有延迟和对资源占用太高，让你考虑使用这种方式。有时候你需要修改音频或者混合音频。不管任何情况，这篇文章试图告诉你应该如何做。</p>

<p>在下一篇中，我们将会讨论MP3音频，敬请期待:&ndash;)</p>

<h4><strong><em>Long Luo for Part 1 created at 23:15 ~ 00: 33 June 21th, 2014 @Shenzhen, China.</em></strong></h4>

<h4><strong><em>Long Luo for Part 2 created at 16:00 ~ 17: 15 June 22th, 2014 @Shenzhen, China.</em></strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Performances Case Study]]></title>
    <link href="http://longluo.github.io/blog/20140618/android-performances_case_study/"/>
    <updated>2014-06-18T22:54:52+08:00</updated>
    <id>http://longluo.github.io/blog/20140618/android-performances_case_study</id>
    <content type="html"><![CDATA[<h4><strong><em>By Long Luo</em></strong></h4>

<h4><strong><em>Long Luo Created at AM12:20 ~ 13:15 @May 03rd, 2014 at Shenzhen, China.</em></strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android学习资源(持续更新中)]]></title>
    <link href="http://longluo.github.io/blog/20140409/android_develop_references/"/>
    <updated>2014-04-09T22:26:13+08:00</updated>
    <id>http://longluo.github.io/blog/20140409/android_develop_references</id>
    <content type="html"><![CDATA[<h4><strong><em>By Long Luo</em></strong></h4>

<p>下面列举一些收藏的资源，用于学习参考：</p>

<h4>1. Android API Guides</h4>

<hr />

<ol>
<li><a href="http://developer.android.com/guide/components/index.html" title="Android API Guides"><strong>Android</strong> API Guides:</a></li>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=android/reference" title="OSChina Android API Guides"><strong>OSChina</strong> Android API Guides：</a></li>
</ol>


<h4>2. Java Develop Kit References</h4>

<hr />

<ol>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk_7u4" title="JDK7 English"><strong>JDK7</strong> English：</a></li>
<li><a href="http://tool.oschina.net/apidocs/apidoc?api=jdk-zh" title="JDK6 Chinese API"><strong>JDK6</strong> Chinese API：</a></li>
</ol>


<!--more-->


<h4>3. Performances</h4>

<hr />

<ol>
<li><a href="http://developer.android.com/training/best-performance.html" title="Best Practices for Performance">Best Practices for Performance：</a></li>
<li><a href="http://www.trinea.cn/android/performance/" title="性能优化系列总篇">性能优化系列总篇</a></li>
<li><a href="http://www.trinea.cn/android/android-imagecache/">图片ImageCache技术</a></li>
<li><a href="http://www.trinea.cn/android/android-imagesdcardcache/" title="图片SD卡缓存优化">图片SD卡缓存技术</a></li>
<li><a href="http://www.trinea.cn/android/database-performance/" title="性能优化之数据库优化">性能优化之数据库优化</a></li>
<li><a href="http://www.trinea.cn/android/android-http-cache/" title="Android网络缓存">Android网络缓存</a></li>
</ol>


<h4>4. Developing</h4>

<hr />

<ol>
<li><a href="http://www.importnew.com/3988.html">Android开发者必知的开发资源</a></li>
<li><a href="http://stackoverflow.com/tags/android/">StackOverFlow@Android</a></li>
</ol>


<h4>5. OpenSource App</h4>

<hr />

<ol>
<li></li>
</ol>


<h4><strong><em>Long Luo Version0.1 Created at 2014/4/8 10:54:32 @Shenzhen, China.</em></strong></h4>

<h4><strong><em>Long Luo Version0.2 Update at 2014/4/9 19:45:07 @Shenzhen, China.</em></strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍一个提高Android ListView或GridView的Smoothie库]]></title>
    <link href="http://longluo.github.io/blog/20140215/introduce_a_android_listview_and+gridview_performence_library_smoothie/"/>
    <updated>2014-02-15T11:41:06+08:00</updated>
    <id>http://longluo.github.io/blog/20140215/introduce_a_android_listview_and gridview_performence_library_smoothie</id>
    <content type="html"><![CDATA[<h4><strong><em>翻译 By Long Luo</em></strong></h4>

<h4>原文链接：<a href="http://lucasr.org/2013/01/06/introducing-smoothie/">Introducing Smoothie</a></h4>

<hr />

<p><img src="http://blogresource.qiniudn.com/2014/Android/smoothie.png" alt="smoothie" /></p>

<p><a href="http://pattrnapp.com/">Pattrn</a> UI中的很大一部分是在滑动时从云端获取图片列表。所以我花了相当长的一段时间去调试，以获得滑动时的体验尽可能的流畅。在过去的几周里，我一直在试图解耦代码，完成了一个很小的库：<a href="https://github.com/lucasr/smoothie">Smoothie</a>。</p>

<p><strong><em>Smoothie</em></strong>提供了一个简单的API来异步加载<em>ListView/GridView</em>的项目，以和UI线程分离。它做了所有你所期望做的事情，加载项目变得可见，取消要求回收的View对应的项目等。但它所完成的还不止这些。</p>

<!--more-->


<p><strong><em>Smoothie</em></strong>是<strong>手势识别</strong>：在Fling手势时，它会必须发起加载项目请求；在滑动列表时，当你的手指按下时，将会启用增量加载项目请求。此外，它支持当前屏幕外项目预加载功能，当你滑动时，可以减少加载占位符类型的项目数。说穿来，<strong><em>Smoothie</em></strong>使用了一个支持可以阻塞队列动态优先执行的的线程池。在屏幕上滑动时，屏幕外即将可见的项目加载请求将动态的获取更高的优先级。</p>

<p>那么，怎么使用它呢？很简单：</p>

<ol>
<li><p>首先在你的布局文件中增加一个<a href="https://github.com/lucasr/smoothie/blob/master/library/src/org/lucasr/smoothie/AsyncListView.java">AsyncListView</a>或者<a href="https://github.com/lucasr/smoothie/blob/master/library/src/org/lucasr/smoothie/AsyncGridView.java">AsyncGridView</a>，只需要增加一个额外传递的方法到响应的父类中。</p></li>
<li><p>然后实现一个和你的应用程序加载和显示项目逻辑一致的<a href="https://github.com/lucasr/smoothie/blob/master/library/src/org/lucasr/smoothie/ItemLoader.java">ItemLoader</a>。你将需要重写下面四种方法：<em>getItemParams()</em>, <em>loadItem()</em>, <em>loadItemFromMemory()</em>以及<em>displayItem()</em>。</p></li>
<li><p>最后在<em>ItemLoader</em>中建一个<a href="https://github.com/lucasr/smoothie/blob/master/library/src/org/lucasr/smoothie/ItemManager.java">ItemManager</a>，同时把它和目标<em>AsyncListView</em>或者<em>AsyncGridView</em>关联起来。</p></li>
</ol>


<p>在你的<em>ListView/GridView</em>控件需要异步加载时，考虑下把<strong><em>Smoothie</em></strong>作为你的轻量骨架。您可以轻松地连接您自己的图像加载/缓存框架在里面。例如，一个典型的示例应用，<a href="https://github.com/chrisbanes/Android-BitmapCache">Android-BitmapCache</a>实现了<a href="https://github.com/lucasr/smoothie/blob/master/samples/bitmap-cache/src/org/lucasr/smoothie/samples/bitmapcache/PatternsListLoader.java">ItemLoader</a>使用一个简单的淡入淡出的动画来显示图像。</p>

<p>除了在代码中的API文档，还可以看看App示例，一边更好地了解如何使用该库。请记住，API是​不是最终版本哦。目前反响是非常好的！</p>

<p><strong>Enjoy it:&ndash;)</strong></p>

<h4><strong><em>Long Luo at AM11:30 ~ 12:42 Feb. 15th, 2014 @Shenzhen, China.</em></strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[提升Android ListView性能的几个技巧]]></title>
    <link href="http://longluo.github.io/blog/20140214/some_tips_about_android_listview_performence/"/>
    <updated>2014-02-14T15:22:10+08:00</updated>
    <id>http://longluo.github.io/blog/20140214/some_tips_about_android_listview_performence</id>
    <content type="html"><![CDATA[<h4><strong><em>翻译 Long Luo</em></strong></h4>

<h4>原文链接：<a href="http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/">Performance Tips for Android’s ListView</a></h4>

<pre><code>译者注：
1. 由于这是技术文章，所以有些词句使用原文，表达更准确。
2. 由于水平有效，有些地方可能翻译的不够准确，如有不当之处，敬请批评指正；
3. inflation这个词一直找不到特别好的中文翻译。
</code></pre>

<h2>ListView如何运作的？</h2>

<hr />

<p><em>ListView</em>是设计应用于对<strong>可扩展性和高性能要求</strong>的地方。实际上，这就意味着<em>ListView</em>有以下2个要求：</p>

<ol>
<li>尽可能少的创建View；</li>
<li>只是绘制和布局在屏幕上可见的子View。</li>
</ol>


<p>理解第一点很简单：通过布局xml文件在创建View并显示是很昂贵耗时耗资源的操作。尽管布局文件已经编译打包成了二进制形式以便于更高效的语法解析，但是创建View仍然需要通过一个特殊的XML树，并实例化所有需要响应的View。</p>

<p><em>ListView</em>通过回收一些不可见的Views，通常在Android源码中称为“<em>ScrapView</em>(废弃的View)”来解决这个问题。这及意味着开发者只需要简单的更新每行的内容而不需要针对每个单独的行的布局来创建View。</p>

<p>为了实现第二点，在我们滑动屏幕时，<em>ListView</em>通过使用View回收器来增加低于或者高于当当前窗口的Views，并当前活动的Views移动到一个可回收池中。这样的话，<em>ListView</em>只需要在内存中保持足够多的Views去填充分配空间中的布局和一些额外的可回收Views，即使当你的Adapter有上百个items的适合。它会使用不同的方法去填充行之间的空间，从顶部或者底部等等，具体取决于窗口是如何变化的。</p>

<!--more-->


<p>下面这个图很直观的展示了当你按下ListView的时候发生了什么：</p>

<p><img src="http://blogresource.qiniudn.com/2014/Android/listview_tips.png" alt="ListView" /></p>

<p>通过上述介绍，相比我们已经熟悉了<em>ListView</em>的这种机制，让我们继续前往技巧部分。正如上述介绍的，在滑动时，<em>ListView</em>通过动态的创建和回收很多View，实现了尽可能地让Adapter的<em>getView()</em>轻量。所有的技巧都是通过多种方法让<em>getView()</em>更快。</p>

<h2>View的回收</h2>

<hr />

<p>当<em>ListView</em>每次需要在屏幕上显示新的一行的时候，会从其Adapter中调用<em>getView()</em>的方法。众所周知，<em>getView()</em>方法有3个参数：行的位置， convertView以及父ViewGroup。</p>

<p>参数<em>convertView</em>说穿来就是之前讲述的ScrapView。当<em>ListView</em>要求更新一行的布局时，<em>convertView</em>是一个非空值。因此，当<em>convertView</em>值非空时，你仅仅需要<em>更新内容</em>即可，而不需要重新一个新行的布局。<em>getView()</em>在Adapter中一般是如下的形式：</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {
    if (convertView == null) {
        convertView = mInflater.inflate(R.layout.your_layout, null);
    }

    TextView text = (TextView) convertView.findViewById(R.id.text);
    text.setText("Position " + position);

    return convertView;
}
</code></pre>

<h2>View Holder如何写的模板</h2>

<hr />

<p>Android很常见的一个操作就是在布局文件中找到一个内部的View。通常是使用一个<strong><em>findViewById()</em></strong>的View方法来实现的。这个<strong><em>findViewById()</em></strong>方法在View树中，根据一个View ID，会递归的被调用来找到其子树。虽然在静态UI布局中使用<strong><em>findViewById()</em></strong>是完全正常的。但是，在滑动时，<em>ListView</em>调用其Adapter中的<em>getView()</em>是非常频繁的。<strong><em>findViewById()</em></strong>可能会影响<em>ListView</em>滑动时的性能，尤其是你的行布局是很复杂的时候。</p>

<p>寻找一个充气布局内的内部观点是在Android上最常用的操作之一。这通常是通过一个名为findViewById（查看方法完成）。此方法将递归经过视图树寻找一个孩子用给定的ID码。静态的UI布局使用findViewById（）是完全正常，但正如你所看到的，ListView中滚动时调用适配器的getView（）非常频繁。 findViewById（）可能perceivably击中ListViews，尤其是滚动的性能，如果你行的布局是不平凡的。</p>

<p>View Holder的模式就是减少在Adapter中<em>getView()</em>方法中调用<em>findViewById()</em>次数。实际上，View Holder是一个轻量级的内部类，用于直接引用到所有内部views。在创建View之后，你可以在每行的View存储为一个标签。通过这种方法，只需要在初次创建布局的时候调用<strong><em>findViewById()</em></strong>。下面是一个使用上述方法的View Holder模板的代码示例：</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder;

    if (convertView == null) {
        convertView = mInflater.inflate(R.layout.your_layout, null);

        holder = new ViewHolder();
        holder.text = (TextView) convertView.findViewById(R.id.text);

        convertView.setTag(holder);
    } else {
        holder = convertView.getTag();
    }

    holder.text.setText("Position " + position);

    return convertView;
}

private static class ViewHolder {
    public TextView text;
}
</code></pre>

<h2>异步加载</h2>

<hr />

<p>很多时候，Android应用在<em>ListView</em>每行中显示一些多媒体内容，比如图片等。在Adapter中的<em>getView()</em>使用应用内置的图片资源还是不会出什么问题的，因为可以存储在Android的高速缓存中。但当你想多态的显示来自本地磁盘或网络的内容时，例如缩略图，简历图片等。在这种情况下，你可能不希望直接在Adapter中的<em>getView()</em>加载它们，因为<a href="http://blog.ometer.com/2008/09/07/synchronous-io-never-ok/">IO进程会阻塞UI线程</a>。如果这样做的话，<em>ListView</em>就看起来非常卡顿。</p>

<p>在一个单独的线程，如果想要运行的所有行的IO操作或任何高负载CPU限制的异步操作。其中的技巧就是要做到符合<em>ListView</em>的回收行为。例如，如果在Adapter中的<em>getView()</em>中，使用<em>AsyncTask</em>的加载去加载资料图片，在<em>AsyncTask</em>完成之前，你正在加载的图片View就有可能被回收用于其他地方。所以，一旦异步操作完成的同时，需要一种机制来知道如果相应的View有没有被回收。</p>

<p>一个简单的方法来实现这一目标是通过附加一些标识该行与它相关的View的信息。然后，当异步操作完成的适合，检查目标行的View和标识的View是否一致。实现这一目标的方法很多。下面是实现这种方法的一个很简单的示例：</p>

<pre><code>public View getView(int position, View convertView,
        ViewGroup parent) {
    ViewHolder holder;

    ...

    holder.position = position;

    new ThumbnailTask(position, holder)
            .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null);

    return convertView;
}

private static class ThumbnailTask extends AsyncTask {
    private int mPosition;
    private ViewHolder mHolder;

    public ThumbnailTask(int position, ViewHolder holder) {
        mPosition = position;
        mHolder = holder;
    }

    @Override
    protected Cursor doInBackground(Void... arg0) {
        // Download bitmap here
    }

    @Override
    protected void onPostExecute(Bitmap bitmap) {
        if (mHolder.position == mPosition) {
            mHolder.thumbnail.setImageBitmap(bitmap);
        }
    }
}

private static class ViewHolder {
    public ImageView thumbnail;
    public int position;
}
</code></pre>

<h2>人机交互知识</h2>

<hr />

<p>做到在每一行异步加载很多资源，是一个高性能的<em>ListView</em>的必经之路。但是，在滑动屏幕时，如果你一味的在每一个<em>getView()</em>调用里面都去启动一个异步的操作，造成的结果就是你会浪费大量资源。因为行被频繁回收，造成大部分返回的结果会被丢弃。</p>

<p>考虑到实际的人机交互情况，在<em>ListView</em>适配器中，在每一行中都不应该去触发任何异步操作。也就是说，在<em>ListView</em>中有fling(快速滑动)操作时，启动任何异步操作都没有任何意义。一旦滚动停止或即将停止，才是开始真正显示每行的内容的时候。</p>

<p>我不会发布一个代码示例贴在这里，因为其中涉及到的代码太多。Romain Guy写了一个很经典的应用：<a href="http://code.google.com/p/shelves/">Shelves app</a>，其中有一个很好的的<a href="https://code.google.com/p/shelves/source/browse/trunk/Shelves/src/org/curiouscreature/android/shelves/activity/ShelvesActivity.java">示例</a>。当<strong><em>GridView</em></strong>停止滑动时不做其他事情时，它就开始触发从而去异步加载书的封面资源。即使在滑动时，你也可以展示缓存中的内容，通过使用memory cache来平衡交互。这真是个好主意！</p>

<h2>以上</h2>

<hr />

<p>我强烈推荐你看下Romain Guy和Adam Powell的关于<em>ListView</em>的<a href="http://www.youtube.com/watch?v=wDBM6wVEO70">讨论</a>，里面涵盖了很多这篇文章的东西。你可以看看<a href="https://play.google.com/store/apps/details?id=org.lucasr.pattrn">Pattrn</a>，可以看到这里面的几个技巧是如何在应用中运用的。</p>

<p>希望它是你在Android开发中一个很有用的参考:&ndash;)</p>

<h4><strong><em>Long Luo at PM17:30 Feb. 14th, 2014 @Shenzhen, China.</em></strong></h4>
]]></content>
  </entry>
  
</feed>
